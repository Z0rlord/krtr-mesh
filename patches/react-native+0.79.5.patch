diff --git a/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js b/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js
index e556ef5..77acbbc 100644
--- a/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js
+++ b/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js
@@ -8,8 +8,8 @@
  * @format
  */
 
-import type {ProcessedColorValue} from '../StyleSheet/processColor';
-import type {ColorValue} from '../StyleSheet/StyleSheet';
+import type { ProcessedColorValue } from '../StyleSheet/processColor';
+import type { ColorValue } from '../StyleSheet/StyleSheet';
 
 import RCTActionSheetManager from './NativeActionSheetManager';
 
@@ -110,12 +110,12 @@ const ActionSheetIOS = {
     );
     invariant(
       processedCancelButtonTintColor == null ||
-        typeof processedCancelButtonTintColor === 'number',
+      typeof processedCancelButtonTintColor === 'number',
       'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor',
     );
     invariant(
       processedDisabledButtonTintColor == null ||
-        typeof processedDisabledButtonTintColor === 'number',
+      typeof processedDisabledButtonTintColor === 'number',
       'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions disabledButtonTintColor',
     );
     RCTActionSheetManager.showActionSheetWithOptions(
@@ -175,7 +175,7 @@ const ActionSheetIOS = {
     );
     invariant(RCTActionSheetManager, "ActionSheetManager doesn't exist");
     RCTActionSheetManager.showShareActionSheetWithOptions(
-      {...options, tintColor: processColor(options.tintColor) as $FlowFixMe},
+      { ...options, tintColor: processColor(options.tintColor) },
       failureCallback,
       successCallback,
     );
diff --git a/node_modules/react-native/Libraries/Animated/Animated.js b/node_modules/react-native/Libraries/Animated/Animated.js
index d81e5dc..e29fdf4 100644
--- a/node_modules/react-native/Libraries/Animated/Animated.js
+++ b/node_modules/react-native/Libraries/Animated/Animated.js
@@ -13,7 +13,6 @@ import typeof * as AnimatedExports from './AnimatedExports';
 
 // The AnimatedExports module is typed as multiple exports to allow
 // for an implicit namespace, but underneath is's a single default export.
-const Animated: AnimatedExports = (require('./AnimatedExports') as $FlowFixMe)
-  .default;
+const Animated = require('./AnimatedExports').default;
 
 export default Animated;
diff --git a/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js b/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
index 80e2514..7ae8c2b 100644
--- a/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
+++ b/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
@@ -9,10 +9,10 @@
  */
 
 'use strict';
-import type {HostComponent} from '../../../src/private/types/HostComponent';
-import type {ViewProps} from '../View/ViewPropTypes';
+import type { HostComponent } from '../../../src/private/types/HostComponent';
+import type { ViewProps } from '../View/ViewPropTypes';
 
-import StyleSheet, {type ColorValue} from '../../StyleSheet/StyleSheet';
+import StyleSheet, { type ColorValue } from '../../StyleSheet/StyleSheet';
 import Platform from '../../Utilities/Platform';
 import View from '../View/View';
 import * as React from 'react';
@@ -39,9 +39,9 @@ export type ActivityIndicatorProps = $ReadOnly<{
   ...ActivityIndicatorIOSProps,
 
   /**
-   	Whether to show the indicator (`true`) or hide it (`false`).
+      Whether to show the indicator (`true`) or hide it (`false`).
    */
-  animating?: ?boolean,
+  animating ?: ? boolean,
 
   /**
     The foreground color of the spinner.
@@ -49,7 +49,7 @@ export type ActivityIndicatorProps = $ReadOnly<{
     @default {@platform android} `null` (system accent default color)
     @default {@platform ios} '#999999'
   */
-  color?: ?ColorValue,
+  color ?: ? ColorValue,
 
   /**
     Size of the indicator.
@@ -57,7 +57,7 @@ export type ActivityIndicatorProps = $ReadOnly<{
     @type enum(`'small'`, `'large'`)
     @type {@platform android} number
   */
-  size?: ?IndicatorSize,
+  size ?: ? IndicatorSize,
 }>;
 
 const ActivityIndicator = (
@@ -85,7 +85,7 @@ const ActivityIndicator = (
       sizeProp = 'large';
       break;
     default:
-      sizeStyle = {height: size, width: size};
+      sizeStyle = { height: size, width: size };
       break;
   }
 
@@ -153,10 +153,7 @@ const ActivityIndicator = (
 ```
 */
 
-const ActivityIndicatorWithRef: component(
-  ref?: React.RefSetter<HostComponent<empty>>,
-  ...props: ActivityIndicatorProps
-) = React.forwardRef(ActivityIndicator);
+const ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
 ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
 
 const styles = StyleSheet.create({
diff --git a/node_modules/react-native/Libraries/Components/Button.js b/node_modules/react-native/Libraries/Components/Button.js
index ad34c96..910c422 100644
--- a/node_modules/react-native/Libraries/Components/Button.js
+++ b/node_modules/react-native/Libraries/Components/Button.js
@@ -10,15 +10,15 @@
 
 'use strict';
 
-import type {TextStyleProp, ViewStyleProp} from '../StyleSheet/StyleSheet';
-import type {GestureResponderEvent} from '../Types/CoreEventTypes';
+import type { TextStyleProp, ViewStyleProp } from '../StyleSheet/StyleSheet';
+import type { GestureResponderEvent } from '../Types/CoreEventTypes';
 import type {
   AccessibilityActionEvent,
   AccessibilityActionInfo,
   AccessibilityState,
 } from './View/ViewAccessibility';
 
-import StyleSheet, {type ColorValue} from '../StyleSheet/StyleSheet';
+import StyleSheet, { type ColorValue } from '../StyleSheet/StyleSheet';
 import Text from '../Text/Text';
 import Platform from '../Utilities/Platform';
 import TouchableNativeFeedback from './Touchable/TouchableNativeFeedback';
@@ -285,10 +285,7 @@ const Touchable: typeof TouchableNativeFeedback | typeof TouchableOpacity =
 
 type ButtonRef = React.ElementRef<typeof Touchable>;
 
-const Button: component(
-  ref?: React.RefSetter<ButtonRef>,
-  ...props: ButtonProps
-) = React.forwardRef((props: ButtonProps, ref: React.RefSetter<ButtonRef>) => {
+const Button = React.forwardRef((props: ButtonProps, ref: React.RefSetter<ButtonRef>) => {
   const {
     accessibilityLabel,
     accessibilityState,
@@ -320,9 +317,9 @@ const Button: component(
   const textStyles: Array<TextStyleProp> = [styles.text];
   if (color) {
     if (Platform.OS === 'ios') {
-      textStyles.push({color: color});
+      textStyles.push({ color: color });
     } else {
-      buttonStyles.push({backgroundColor: color});
+      buttonStyles.push({ backgroundColor: color });
     }
   }
 
@@ -339,7 +336,7 @@ const Button: component(
 
   _accessibilityState =
     disabled !== _accessibilityState?.disabled
-      ? {..._accessibilityState, disabled}
+      ? { ..._accessibilityState, disabled }
       : _accessibilityState;
 
   if (disabled) {
diff --git a/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js b/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js
index a82d542..0251b38 100644
--- a/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js
+++ b/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js
@@ -52,7 +52,7 @@ function UnimplementedLayoutConformance(
 
 export default (isFabricUIManagerInstalled
   ? LayoutConformance
-  : UnimplementedLayoutConformance) as component(...LayoutConformanceProps);
+  : UnimplementedLayoutConformance); // component(...LayoutConformanceProps)
 
 const styles = StyleSheet.create({
   container: {
diff --git a/node_modules/react-native/Libraries/Components/Pressable/Pressable.js b/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
index 0a6cfcd..d981a3b 100644
--- a/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
+++ b/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
@@ -13,18 +13,18 @@ import type {
   LayoutChangeEvent,
   MouseEvent,
 } from '../../Types/CoreEventTypes';
-import type {ViewProps} from '../View/ViewPropTypes';
+import type { ViewProps } from '../View/ViewPropTypes';
 
-import {PressabilityDebugView} from '../../Pressability/PressabilityDebug';
+import { PressabilityDebugView } from '../../Pressability/PressabilityDebug';
 import usePressability from '../../Pressability/usePressability';
-import {type RectOrSize} from '../../StyleSheet/Rect';
+import { type RectOrSize } from '../../StyleSheet/Rect';
 import useMergeRefs from '../../Utilities/useMergeRefs';
 import View from '../View/View';
 import useAndroidRippleForView, {
   type PressableAndroidRippleConfig,
 } from './useAndroidRippleForView';
 import * as React from 'react';
-import {useMemo, useRef, useState} from 'react';
+import { useMemo, useRef, useState } from 'react';
 
 type ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;
 
@@ -116,8 +116,8 @@ type PressableBaseProps = $ReadOnly<{
    * the component is currently pressed and returns view styles.
    */
   style?:
-    | ViewStyleProp
-    | ((state: PressableStateCallbackType) => ViewStyleProp),
+  | ViewStyleProp
+  | ((state: PressableStateCallbackType) => ViewStyleProp),
 
   /**
    * Identifier used to find this view in tests.
@@ -193,7 +193,7 @@ function Pressable(
     ...restProps
   } = props;
 
-  const viewRef = useRef<Instance | null>(null);
+  const viewRef = useRef < Instance | null > (null);
   const mergedRef = useMergeRefs(forwardedRef, viewRef);
 
   const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);
@@ -212,7 +212,7 @@ function Pressable(
   };
 
   _accessibilityState =
-    disabled != null ? {..._accessibilityState, disabled} : _accessibilityState;
+    disabled != null ? { ..._accessibilityState, disabled } : _accessibilityState;
 
   const accessibilityValue = {
     max: props['aria-valuemax'] ?? props.accessibilityValue?.max,
@@ -302,9 +302,9 @@ function Pressable(
       {...restPropsWithDefaults}
       {...eventHandlers}
       ref={mergedRef}
-      style={typeof style === 'function' ? style({pressed}) : style}
+      style={typeof style === 'function' ? style({ pressed }) : style}
       collapsable={false}>
-      {typeof children === 'function' ? children({pressed}) : children}
+      {typeof children === 'function' ? children({ pressed }) : children}
       {__DEV__ ? <PressabilityDebugView color="red" hitSlop={hitSlop} /> : null}
     </View>
   );
@@ -318,7 +318,4 @@ function usePressState(forcePressed: boolean): [boolean, (boolean) => void] {
 const MemoedPressable = React.memo(React.forwardRef(Pressable));
 MemoedPressable.displayName = 'Pressable';
 
-export default (MemoedPressable: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...props: PressableProps
-));
+export default MemoedPressable;
diff --git a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js
index 410d2c0..9515d38 100644
--- a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js
+++ b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js
@@ -39,12 +39,7 @@ export type {ProgressBarAndroidProps};
  * },
  * ```
  */
-const ProgressBarAndroidWithForwardedRef: component(
-  ref?: React.RefSetter<
-    React.ElementRef<typeof ProgressBarAndroidNativeComponent>,
-  >,
-  ...props: ProgressBarAndroidProps
-) = React.forwardRef(function ProgressBarAndroid(
+const ProgressBarAndroidWithForwardedRef = React.forwardRef(function ProgressBarAndroid(
   {
     // $FlowFixMe[incompatible-type]
     styleAttr = 'Normal',
diff --git a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js
index 7844258..5cc9519 100644
--- a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js
+++ b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js
@@ -11,14 +11,9 @@
 'use strict';
 
 import typeof ProgressBarAndroidNativeComponentType from './ProgressBarAndroidNativeComponent';
-import type {ProgressBarAndroidProps} from './ProgressBarAndroidTypes';
+import type { ProgressBarAndroidProps } from './ProgressBarAndroidTypes';
 
-export type {ProgressBarAndroidProps};
+export type { ProgressBarAndroidProps };
 
 export default require('../UnimplementedViews/UnimplementedView')
-  .default as $FlowFixMe as component(
-  ref?: React.RefSetter<
-    React.ElementRef<ProgressBarAndroidNativeComponentType>,
-  >,
-  ...props: ProgressBarAndroidProps
-);
+  .default; // as $FlowFixMe as component(...ProgressBarAndroidProps)
diff --git a/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js b/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js
index 290fdbd..876bc5d 100644
--- a/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js
+++ b/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js
@@ -8,7 +8,7 @@
  * @format
  */
 
-import type {ViewProps} from '../View/ViewPropTypes';
+import type { ViewProps } from '../View/ViewPropTypes';
 
 import Platform from '../../Utilities/Platform';
 import View from '../View/View';
@@ -23,10 +23,7 @@ import * as React from 'react';
  * limitation of the screen, such as rounded corners or camera notches (aka
  * sensor housing area on iPhone X).
  */
-const exported: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...props: ViewProps
-) = Platform.select({
+const exported = Platform.select({
   ios: require('./RCTSafeAreaViewNativeComponent').default,
   default: View,
 });
diff --git a/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js b/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
index 6cae74b..e77e0a9 100644
--- a/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
+++ b/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
@@ -8,21 +8,21 @@
  * @flow strict-local
  */
 
-import type {HostInstance} from '../../../src/private/types/HostInstance';
-import type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';
-import type {PointProp} from '../../StyleSheet/PointPropType';
-import type {ViewStyleProp} from '../../StyleSheet/StyleSheet';
-import type {ColorValue} from '../../StyleSheet/StyleSheet';
+import type { HostInstance } from '../../../src/private/types/HostInstance';
+import type { EdgeInsetsProp } from '../../StyleSheet/EdgeInsetsPropType';
+import type { PointProp } from '../../StyleSheet/PointPropType';
+import type { ViewStyleProp } from '../../StyleSheet/StyleSheet';
+import type { ColorValue } from '../../StyleSheet/StyleSheet';
 import type {
   GestureResponderEvent,
   LayoutChangeEvent,
   ScrollEvent,
 } from '../../Types/CoreEventTypes';
-import type {EventSubscription} from '../../vendor/emitter/EventEmitter';
-import type {KeyboardEvent, KeyboardMetrics} from '../Keyboard/Keyboard';
+import type { EventSubscription } from '../../vendor/emitter/EventEmitter';
+import type { KeyboardEvent, KeyboardMetrics } from '../Keyboard/Keyboard';
 import typeof View from '../View/View';
-import type {ViewProps} from '../View/ViewPropTypes';
-import type {ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';
+import type { ViewProps } from '../View/ViewPropTypes';
+import type { ScrollViewStickyHeaderProps } from './ScrollViewStickyHeader';
 
 import {
   HScrollContentViewNativeComponent,
@@ -34,7 +34,7 @@ import {
 } from '../../../src/private/components/VScrollViewNativeComponents';
 import AnimatedImplementation from '../../Animated/AnimatedImplementation';
 import FrameRateLogger from '../../Interaction/FrameRateLogger';
-import {findNodeHandle} from '../../ReactNative/RendererProxy';
+import { findNodeHandle } from '../../ReactNative/RendererProxy';
 import UIManager from '../../ReactNative/UIManager';
 import flattenStyle from '../../StyleSheet/flattenStyle';
 import splitLayoutProps from '../../StyleSheet/splitLayoutProps';
@@ -46,7 +46,7 @@ import Keyboard from '../Keyboard/Keyboard';
 import TextInputState from '../TextInput/TextInputState';
 import processDecelerationRate from './processDecelerationRate';
 import Commands from './ScrollViewCommands';
-import ScrollViewContext, {HORIZONTAL, VERTICAL} from './ScrollViewContext';
+import ScrollViewContext, { HORIZONTAL, VERTICAL } from './ScrollViewContext';
 import ScrollViewStickyHeader from './ScrollViewStickyHeader';
 import invariant from 'invariant';
 import memoize from 'memoize-one';
@@ -134,18 +134,18 @@ export interface ScrollViewScrollToOptions {
 
 // Public methods for ScrollView
 export interface ScrollViewImperativeMethods {
-  +getScrollResponder: $PropertyType<ScrollView, 'getScrollResponder'>;
-  +getScrollableNode: $PropertyType<ScrollView, 'getScrollableNode'>;
-  +getInnerViewNode: $PropertyType<ScrollView, 'getInnerViewNode'>;
-  +getInnerViewRef: $PropertyType<ScrollView, 'getInnerViewRef'>;
-  +getNativeScrollRef: $PropertyType<ScrollView, 'getNativeScrollRef'>;
-  +scrollTo: $PropertyType<ScrollView, 'scrollTo'>;
-  +scrollToEnd: $PropertyType<ScrollView, 'scrollToEnd'>;
-  +flashScrollIndicators: $PropertyType<ScrollView, 'flashScrollIndicators'>;
-  +scrollResponderZoomTo: $PropertyType<ScrollView, 'scrollResponderZoomTo'>;
-  +scrollResponderScrollNativeHandleToKeyboard: $PropertyType<
-    ScrollView,
-    'scrollResponderScrollNativeHandleToKeyboard',
+  +getScrollResponder: $PropertyType < ScrollView, 'getScrollResponder' >;
++getScrollableNode: $PropertyType < ScrollView, 'getScrollableNode' >;
++getInnerViewNode: $PropertyType < ScrollView, 'getInnerViewNode' >;
++getInnerViewRef: $PropertyType < ScrollView, 'getInnerViewRef' >;
++getNativeScrollRef: $PropertyType < ScrollView, 'getNativeScrollRef' >;
++scrollTo: $PropertyType < ScrollView, 'scrollTo' >;
++scrollToEnd: $PropertyType < ScrollView, 'scrollToEnd' >;
++flashScrollIndicators: $PropertyType < ScrollView, 'flashScrollIndicators' >;
++scrollResponderZoomTo: $PropertyType < ScrollView, 'scrollResponderZoomTo' >;
++scrollResponderScrollNativeHandleToKeyboard: $PropertyType <
+  ScrollView,
+  'scrollResponderScrollNativeHandleToKeyboard',
   >;
 }
 
@@ -154,7 +154,7 @@ export type ScrollResponderType = ScrollViewImperativeMethods;
 
 export interface PublicScrollViewInstance
   extends HostInstance,
-    ScrollViewImperativeMethods {}
+  ScrollViewImperativeMethods { }
 
 type InnerViewInstance = React.ElementRef<View>;
 
@@ -371,10 +371,7 @@ export type ScrollViewPropsAndroid = $ReadOnly<{
   fadingEdgeLength?: ?number,
 }>;
 
-type StickyHeaderComponentType = component(
-  ref?: React.RefSetter<$ReadOnly<interface {setNextHeaderY: number => void}>>,
-  ...ScrollViewStickyHeaderProps
-);
+type StickyHeaderComponentType = React.ComponentType<ScrollViewStickyHeaderProps>;
 
 export type ScrollViewProps = $ReadOnly<{
   ...ViewProps,
@@ -398,19 +395,19 @@ export type ScrollViewProps = $ReadOnly<{
    * });
    * ```
    */
-  contentContainerStyle?: ?ViewStyleProp,
+  contentContainerStyle ?: ? ViewStyleProp,
   /**
    * Used to manually set the starting scroll offset.
    * The default value is `{x: 0, y: 0}`.
    */
-  contentOffset?: ?PointProp,
+  contentOffset ?: ? PointProp,
   /**
    * When true, the scroll view stops on the next index (in relation to scroll
    * position at release) regardless of how fast the gesture is. This can be
    * used for pagination when the page is less than the width of the
    * horizontal ScrollView or the height of the vertical ScrollView. The default value is false.
    */
-  disableIntervalMomentum?: ?boolean,
+  disableIntervalMomentum ?: ? boolean,
   /**
    * A floating-point number that determines how quickly the scroll view
    * decelerates after the user lifts their finger. You may also use string
@@ -421,7 +418,7 @@ export type ScrollViewProps = $ReadOnly<{
    *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)
    *   - `'fast'`: 0.99 on iOS, 0.9 on Android
    */
-  decelerationRate?: ?DecelerationRateType,
+  decelerationRate ?: ? DecelerationRateType,
 
   /**
    * *Experimental, iOS Only*. The API is experimental and will change in future releases.
@@ -434,18 +431,18 @@ export type ScrollViewProps = $ReadOnly<{
    *
    * The default value is 1.
    */
-  experimental_endDraggingSensitivityMultiplier?: ?number,
+  experimental_endDraggingSensitivityMultiplier ?: ? number,
 
   /**
    * When true, the scroll view's children are arranged horizontally in a row
    * instead of vertically in a column. The default value is false.
    */
-  horizontal?: ?boolean,
+  horizontal ?: ? boolean,
   /**
    * If sticky headers should stick at the bottom instead of the top of the
    * ScrollView. This is usually used with inverted ScrollViews.
    */
-  invertStickyHeaders?: ?boolean,
+  invertStickyHeaders ?: ? boolean,
   /**
    * Determines whether the keyboard gets dismissed in response to a drag.
    *
@@ -460,9 +457,9 @@ export type ScrollViewProps = $ReadOnly<{
    *     synchrony with the touch; dragging upwards cancels the dismissal.
    *     On android this is not supported and it will have the same behavior as 'none'.
    */
-  keyboardDismissMode?: ?// default
-  // cross-platform
-  ('none' | 'on-drag' | 'interactive'), // ios only
+  keyboardDismissMode ?: ?// default
+    // cross-platform
+    ('none' | 'on-drag' | 'interactive'), // ios only
   /**
    * Determines when the keyboard should stay visible after a tap.
    *
@@ -475,7 +472,7 @@ export type ScrollViewProps = $ReadOnly<{
    *   - `false`, deprecated, use 'never' instead
    *   - `true`, deprecated, use 'always' instead
    */
-  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),
+  keyboardShouldPersistTaps ?: ? ('always' | 'never' | 'handled' | true | false),
   /**
    * When set, the scroll view will adjust the scroll position so that the first child that is
    * partially or fully visible and at or beyond `minIndexForVisible` will not change position.
@@ -499,32 +496,32 @@ export type ScrollViewProps = $ReadOnly<{
    * whether content is "visible" or not.
    *
    */
-  maintainVisibleContentPosition?: ?$ReadOnly<{
+  maintainVisibleContentPosition ?: ? $ReadOnly < {
     minIndexForVisible: number,
-    autoscrollToTopThreshold?: ?number,
-  }>,
+    autoscrollToTopThreshold?: ? number,
+  } >,
   /**
    * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).
    */
-  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,
+  onMomentumScrollBegin ?: ? (event: ScrollEvent) => void,
   /**
    * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).
    */
-  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,
+  onMomentumScrollEnd ?: ? (event: ScrollEvent) => void,
 
   /**
    * Fires at most once per frame during scrolling.
    */
-  onScroll?: ?(event: ScrollEvent) => void,
+  onScroll ?: ? (event: ScrollEvent) => void,
   /**
    * Called when the user begins to drag the scroll view.
    */
-  onScrollBeginDrag?: ?(event: ScrollEvent) => void,
+  onScrollBeginDrag ?: ? (event: ScrollEvent) => void,
   /**
    * Called when the user stops dragging the scroll view and it either stops
    * or begins to glide.
    */
-  onScrollEndDrag?: ?(event: ScrollEvent) => void,
+  onScrollEndDrag ?: ? (event: ScrollEvent) => void,
   /**
    * Called when scrollable content view of the ScrollView changes.
    *
@@ -534,41 +531,41 @@ export type ScrollViewProps = $ReadOnly<{
    * It's implemented using onLayout handler attached to the content container
    * which this ScrollView renders.
    */
-  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,
-  onKeyboardDidShow?: (event: KeyboardEvent) => void,
-  onKeyboardDidHide?: (event: KeyboardEvent) => void,
-  onKeyboardWillShow?: (event: KeyboardEvent) => void,
-  onKeyboardWillHide?: (event: KeyboardEvent) => void,
+  onContentSizeChange ?: (contentWidth: number, contentHeight: number) => void,
+  onKeyboardDidShow ?: (event: KeyboardEvent) => void,
+  onKeyboardDidHide ?: (event: KeyboardEvent) => void,
+  onKeyboardWillShow ?: (event: KeyboardEvent) => void,
+  onKeyboardWillHide ?: (event: KeyboardEvent) => void,
   /**
    * When true, the scroll view stops on multiples of the scroll view's size
    * when scrolling. This can be used for horizontal pagination. The default
    * value is false.
    */
-  pagingEnabled?: ?boolean,
+  pagingEnabled ?: ? boolean,
   /**
    * When false, the view cannot be scrolled via touch interaction.
    * The default value is true.
    *
    * Note that the view can always be scrolled by calling `scrollTo`.
    */
-  scrollEnabled?: ?boolean,
+  scrollEnabled ?: ? boolean,
   /**
    * Limits how often scroll events will be fired while scrolling, specified as
    * a time interval in ms. This may be useful when expensive work is performed
    * in response to scrolling. Values <= `16` will disable throttling,
    * regardless of the refresh rate of the device.
    */
-  scrollEventThrottle?: ?number,
+  scrollEventThrottle ?: ? number,
   /**
    * When true, shows a vertical scroll indicator.
    * The default value is true.
    */
-  showsVerticalScrollIndicator?: ?boolean,
+  showsVerticalScrollIndicator ?: ? boolean,
   /**
    * When true, Sticky header is hidden when scrolling down, and dock at the top
    * when scrolling up
    */
-  stickyHeaderHiddenOnScroll?: ?boolean,
+  stickyHeaderHiddenOnScroll ?: ? boolean,
   /**
    * An array of child indices determining which children get docked to the
    * top of the screen when scrolling. For example, passing
@@ -576,14 +573,14 @@ export type ScrollViewProps = $ReadOnly<{
    * top of the scroll view. This property is not supported in conjunction
    * with `horizontal={true}`.
    */
-  stickyHeaderIndices?: ?$ReadOnlyArray<number>,
+  stickyHeaderIndices ?: ? $ReadOnlyArray < number >,
   /**
    * A React Component that will be used to render sticky headers.
    * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.
    * You may need to set this if your sticky header uses custom transforms (eg. translation),
    * for example when you want your list to have an animated hidable header.
    */
-  StickyHeaderComponent?: StickyHeaderComponentType,
+  StickyHeaderComponent ?: StickyHeaderComponentType,
   /**
    * When `snapToInterval` is set, `snapToAlignment` will define the relationship
    * of the snapping to the scroll view.
@@ -592,7 +589,7 @@ export type ScrollViewProps = $ReadOnly<{
    *   - `'center'` will align the snap in the center
    *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)
    */
-  snapToAlignment?: ?('start' | 'center' | 'end'),
+  snapToAlignment ?: ? ('start' | 'center' | 'end'),
   /**
    * When set, causes the scroll view to stop at multiples of the value of
    * `snapToInterval`. This can be used for paginating through children
@@ -601,7 +598,7 @@ export type ScrollViewProps = $ReadOnly<{
    *
    * Overrides less configurable `pagingEnabled` prop.
    */
-  snapToInterval?: ?number,
+  snapToInterval ?: ? number,
   /**
    * When set, causes the scroll view to stop at the defined offsets.
    * This can be used for paginating through variously sized children
@@ -610,7 +607,7 @@ export type ScrollViewProps = $ReadOnly<{
    *
    * Overrides less configurable `pagingEnabled` and `snapToInterval` props.
    */
-  snapToOffsets?: ?$ReadOnlyArray<number>,
+  snapToOffsets ?: ? $ReadOnlyArray < number >,
   /**
    * Use in conjunction with `snapToOffsets`. By default, the beginning
    * of the list counts as a snap offset. Set `snapToStart` to false to disable
@@ -618,7 +615,7 @@ export type ScrollViewProps = $ReadOnly<{
    * the first `snapToOffsets` offset.
    * The default value is true.
    */
-  snapToStart?: ?boolean,
+  snapToStart ?: ? boolean,
   /**
    * Use in conjunction with `snapToOffsets`. By default, the end
    * of the list counts as a snap offset. Set `snapToEnd` to false to disable
@@ -626,14 +623,14 @@ export type ScrollViewProps = $ReadOnly<{
    * the last `snapToOffsets` offset.
    * The default value is true.
    */
-  snapToEnd?: ?boolean,
+  snapToEnd ?: ? boolean,
   /**
    * Experimental: When true, offscreen child views (whose `overflow` value is
    * `hidden`) are removed from their native backing superview when offscreen.
    * This can improve scrolling performance on long lists. The default value is
    * true.
    */
-  removeClippedSubviews?: ?boolean,
+  removeClippedSubviews ?: ? boolean,
   /**
    * A RefreshControl component, used to provide pull-to-refresh
    * functionality for the ScrollView. Only works for vertical ScrollViews
@@ -643,19 +640,19 @@ export type ScrollViewProps = $ReadOnly<{
    */
   /* $FlowFixMe[unclear-type] - how to handle generic type without existential
    * operator? */
-  refreshControl?: ?React.Node,
-  children?: React.Node,
+  refreshControl ?: ? React.Node,
+  children ?: React.Node,
   /**
    * A ref to the inner View element of the ScrollView. This should be used
    * instead of calling `getInnerViewRef`.
    */
-  innerViewRef?: React.RefSetter<InnerViewInstance>,
+  innerViewRef ?: React.RefSetter < InnerViewInstance >,
   /**
    * A ref to the Native ScrollView component. This ref can be used to call
    * all of ScrollView's public methods, in addition to native methods like
    * measure, measureLayout, etc.
    */
-  scrollViewRef?: React.RefSetter<PublicScrollViewInstance>,
+  scrollViewRef ?: React.RefSetter < PublicScrollViewInstance >,
 }>;
 
 type State = {
@@ -716,7 +713,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
   }
 
   _scrollAnimatedValue: AnimatedImplementation.Value;
-  _scrollAnimatedValueAttachment: ?{detach: () => void, ...} = null;
+  _scrollAnimatedValueAttachment: ?{ detach: () => void, ... } = null;
   _stickyHeaderRefs: Map<
     React.Key,
     React.ElementRef<StickyHeaderComponentType>,
@@ -752,12 +749,10 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
   componentDidMount() {
     if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
       console.warn(
-        `'keyboardShouldPersistTaps={${
-          this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'
+        `'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'
         }}' is deprecated. ` +
-          `Use 'keyboardShouldPersistTaps="${
-            this.props.keyboardShouldPersistTaps ? 'always' : 'never'
-          }"' instead`,
+        `Use 'keyboardShouldPersistTaps="${this.props.keyboardShouldPersistTaps ? 'always' : 'never'
+        }"' instead`,
       );
     }
 
@@ -864,7 +859,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
     if (typeof options === 'number') {
       console.warn(
         '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +
-          'animated: true})` instead.',
+        'animated: true})` instead.',
       );
       y = options;
       x = deprecatedX;
@@ -931,30 +926,30 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
     additionalOffset?: number,
     preventNegativeScrollOffset?: boolean,
   ) => {
-    this._additionalScrollOffset = additionalOffset || 0;
-    this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
+      this._additionalScrollOffset = additionalOffset || 0;
+      this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
 
-    if (this._innerView.nativeInstance == null) {
-      return;
-    }
+      if (this._innerView.nativeInstance == null) {
+        return;
+      }
 
-    if (typeof nodeHandle === 'number') {
-      UIManager.measureLayout(
-        nodeHandle,
-        nullthrows(findNodeHandle(this)),
-        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
-        this._textInputFocusError,
-        this._inputMeasureAndScrollToKeyboard,
-      );
-    } else {
-      nodeHandle.measureLayout(
-        this._innerView.nativeInstance,
-        this._inputMeasureAndScrollToKeyboard,
-        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
-        this._textInputFocusError,
-      );
-    }
-  };
+      if (typeof nodeHandle === 'number') {
+        UIManager.measureLayout(
+          nodeHandle,
+          nullthrows(findNodeHandle(this)),
+          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+          this._textInputFocusError,
+          this._inputMeasureAndScrollToKeyboard,
+        );
+      } else {
+        nodeHandle.measureLayout(
+          this._innerView.nativeInstance,
+          this._inputMeasureAndScrollToKeyboard,
+          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+          this._textInputFocusError,
+        );
+      }
+    };
 
   /**
    * A helper function to zoom to a specific rect in the scrollview. The argument has the shape
@@ -981,22 +976,22 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
     },
     animated?: boolean, // deprecated, put this inside the rect argument instead
   ) => {
-    invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');
-    if ('animated' in rect) {
-      this._animated = rect.animated;
-      delete rect.animated;
-    } else if (typeof animated !== 'undefined') {
-      console.warn(
-        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',
-      );
-    }
+      invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');
+      if ('animated' in rect) {
+        this._animated = rect.animated;
+        delete rect.animated;
+      } else if (typeof animated !== 'undefined') {
+        console.warn(
+          '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',
+        );
+      }
 
-    const component = this.getNativeScrollRef();
-    if (component == null) {
-      return;
-    }
-    Commands.zoomToRect(component, rect, animated !== false);
-  };
+      const component = this.getNativeScrollRef();
+      if (component == null) {
+        return;
+      }
+      Commands.zoomToRect(component, rect, animated !== false);
+    };
 
   _textInputFocusError() {
     console.warn('Error measuring text field.');
@@ -1034,7 +1029,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
       if (this._preventNegativeScrollOffset === true) {
         scrollOffsetY = Math.max(0, scrollOffsetY);
       }
-      this.scrollTo({x: 0, y: scrollOffsetY, animated: true});
+      this.scrollTo({ x: 0, y: scrollOffsetY, animated: true });
 
       this._additionalScrollOffset = 0;
       this._preventNegativeScrollOffset = false;
@@ -1074,7 +1069,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
         AnimatedImplementation.attachNativeEvent(
           this.getNativeScrollRef(),
           'onScroll',
-          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],
+          [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }],
         );
     }
   }
@@ -1095,11 +1090,11 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
     event: LayoutChangeEvent,
     key: React.Key,
   ) {
-    const {stickyHeaderIndices} = this.props;
+    const { stickyHeaderIndices } = this.props;
     if (!stickyHeaderIndices) {
       return;
     }
-    const childArray = React.Children.toArray<$FlowFixMe>(this.props.children);
+    const childArray = React.Children.toArray < $FlowFixMe > (this.props.children);
     if (key !== this._getKeyForIndex(index, childArray)) {
       // ignore stale layout update
       return;
@@ -1127,7 +1122,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
 
   _handleLayout = (e: LayoutChangeEvent) => {
     if (this.props.invertStickyHeaders === true) {
-      this.setState({layoutHeight: e.nativeEvent.layout.height});
+      this.setState({ layoutHeight: e.nativeEvent.layout.height });
     }
     if (this.props.onLayout) {
       this.props.onLayout(e);
@@ -1135,7 +1130,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
   };
 
   _handleContentOnLayout = (e: LayoutChangeEvent) => {
-    const {width, height} = e.nativeEvent.layout;
+    const { width, height } = e.nativeEvent.layout;
     this.props.onContentSizeChange &&
       this.props.onContentSizeChange(width, height);
   };
@@ -1274,7 +1269,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
    * Invoke this from an `onScrollEndDrag` event.
    */
   _handleScrollEndDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {
-    const {velocity} = e.nativeEvent;
+    const { velocity } = e.nativeEvent;
     // - If we are animating, then this is a "drag" that is stopping the scrollview and momentum end
     //   will fire.
     // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or
@@ -1325,7 +1320,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
    * altogether. To improve this, find a way to disable the `UIScrollView` after
    * a touch has already started.
    */
-  _handleResponderReject: () => void = () => {};
+  _handleResponderReject: () => void = () => { };
 
   /**
    * Invoke this from an `onResponderRelease` event.
@@ -1464,7 +1459,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
       // and a new touch starts with a non-textinput target (in which case the
       // first tap should be sent to the scroll view and dismiss the keyboard,
       // then the second tap goes to the actual interior view)
-      const {keyboardShouldPersistTaps} = this.props;
+      const { keyboardShouldPersistTaps } = this.props;
       const keyboardNeverPersistTaps =
         !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
 
@@ -1546,7 +1541,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
     const nativeEvent = e.nativeEvent;
     this._isTouching = nativeEvent.touches.length !== 0;
 
-    const {keyboardShouldPersistTaps} = this.props;
+    const { keyboardShouldPersistTaps } = this.props;
     const keyboardNeverPersistsTaps =
       !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
 
@@ -1639,8 +1634,8 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
       invariant(
         childLayoutProps.length === 0,
         'ScrollView child layout (' +
-          JSON.stringify(childLayoutProps) +
-          ') must be applied through the contentContainerStyle prop.',
+        JSON.stringify(childLayoutProps) +
+        ') must be applied through the contentContainerStyle prop.',
       );
     }
 
@@ -1648,16 +1643,16 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
       this.props.onContentSizeChange == null
         ? null
         : {
-            onLayout: this._handleContentOnLayout,
-          };
+          onLayout: this._handleContentOnLayout,
+        };
 
-    const {stickyHeaderIndices} = this.props;
+    const { stickyHeaderIndices } = this.props;
     let children = this.props.children;
     /**
      * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.
      * https://react.dev/reference/react/Children#children-toarray-caveats
      */
-    children = React.Children.toArray<$FlowFixMe>(children);
+    children = React.Children.toArray < $FlowFixMe > (children);
 
     if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
       children = children.map((child, index) => {
@@ -1733,7 +1728,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
 
     const baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;
 
-    const {experimental_endDraggingSensitivityMultiplier, ...otherProps} =
+    const { experimental_endDraggingSensitivityMultiplier, ...otherProps } =
       this.props;
     const props = {
       ...otherProps,
@@ -1789,7 +1784,7 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
       }),
     };
 
-    const {decelerationRate} = this.props;
+    const { decelerationRate } = this.props;
     if (decelerationRate != null) {
       props.decelerationRate = processDecelerationRate(decelerationRate);
     }
@@ -1815,11 +1810,11 @@ class ScrollView extends React.Component<ScrollViewProps, State> {
         // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.
         // Note: we should split props.style on the inner and outer props
         // however, the ScrollView still needs the baseStyle to be scrollable
-        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));
+        const { outer, inner } = splitLayoutProps(flattenStyle(props.style));
         // $FlowFixMe[incompatible-call]
         return React.cloneElement(
           refreshControl,
-          {style: StyleSheet.compose(baseStyle, outer)},
+          { style: StyleSheet.compose(baseStyle, outer) },
           <NativeScrollView
             {...props}
             style={StyleSheet.compose(baseStyle, inner)}
@@ -1901,10 +1896,7 @@ function createRefForwarder<TNativeInstance, TPublicInstance>(
 // NOTE: This wrapper component is necessary because `ScrollView` is a class
 // component and we need to map `ref` to a differently named prop. This can be
 // removed when `ScrollView` is a functional component.
-const Wrapper: component(
-  ref?: React.RefSetter<PublicScrollViewInstance>,
-  ...props: ScrollViewProps
-) = React.forwardRef(function Wrapper(
+const Wrapper = React.forwardRef(function Wrapper(
   props: ScrollViewProps,
   ref: ?React.RefSetter<PublicScrollViewInstance>,
 ): React.Node {
diff --git a/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js b/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js
index 89d62da..a8fea1c 100644
--- a/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js
+++ b/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js
@@ -36,10 +36,7 @@ interface Instance extends React.ElementRef<typeof Animated.View> {
   +setNextHeaderY: number => void;
 }
 
-const ScrollViewStickyHeaderWithForwardedRef: component(
-  ref: React.RefSetter<Instance>,
-  ...props: ScrollViewStickyHeaderProps
-) = React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
+const ScrollViewStickyHeaderWithForwardedRef = React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
   const {
     inverted,
     scrollViewHeight,
diff --git a/node_modules/react-native/Libraries/Components/Switch/Switch.js b/node_modules/react-native/Libraries/Components/Switch/Switch.js
index 25c09e0..d19e1bd 100644
--- a/node_modules/react-native/Libraries/Components/Switch/Switch.js
+++ b/node_modules/react-native/Libraries/Components/Switch/Switch.js
@@ -161,10 +161,7 @@ type SwitchRef = React.ElementRef<
   export default App;
   ```
  */
-const Switch: component(
-  ref?: React.RefSetter<SwitchRef>,
-  ...props: SwitchProps
-) = React.forwardRef(function Switch(props, forwardedRef): React.Node {
+const Switch = React.forwardRef(function Switch(props, forwardedRef): React.Node {
   const {
     disabled,
     ios_backgroundColor,
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js b/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
index 53d6337..a7243b8 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
@@ -1108,10 +1108,7 @@ export interface TextInputInstance extends HostInstance {
  * or control this param programmatically with native code.
  *
  */
-type InternalTextInput = component(
-  ref: React.RefSetter<TextInputInstance>,
-  ...TextInputProps
-);
+type InternalTextInput = React.ComponentType<any>;
 
 export type TextInputComponentStatics = $ReadOnly<{
   State: $ReadOnly<{
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.js b/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
index a2f2081..b3715cf 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
@@ -8,15 +8,15 @@
  * @format
  */
 
-import type {HostInstance} from '../../../src/private/types/HostInstance';
-import type {____TextStyle_Internal as TextStyleInternal} from '../../StyleSheet/StyleSheetTypes';
+import type { HostInstance } from '../../../src/private/types/HostInstance';
+import type { ____TextStyle_Internal as TextStyleInternal } from '../../StyleSheet/StyleSheetTypes';
 import type {
   GestureResponderEvent,
   NativeSyntheticEvent,
   ScrollEvent,
 } from '../../Types/CoreEventTypes';
-import type {ViewProps} from '../View/ViewPropTypes';
-import type {TextInputInstance, TextInputType} from './TextInput.flow';
+import type { ViewProps } from '../View/ViewPropTypes';
+import type { TextInputInstance, TextInputType } from './TextInput.flow';
 
 import * as ReactNativeFeatureFlags from '../../../src/private/featureflags/ReactNativeFeatureFlags';
 import usePressability from '../../Pressability/usePressability';
@@ -34,7 +34,7 @@ import TextInputState from './TextInputState';
 import invariant from 'invariant';
 import nullthrows from 'nullthrows';
 import * as React from 'react';
-import {useCallback, useLayoutEffect, useRef, useState} from 'react';
+import { useCallback, useLayoutEffect, useRef, useState } from 'react';
 
 let AndroidTextInput;
 let AndroidTextInputCommands;
@@ -116,8 +116,8 @@ export type TextInputSelectionChangeEvent =
 type TextInputKeyPressEventData = $ReadOnly<{
   ...TargetEvent,
   key: string,
-  target?: ?number,
-  eventCount?: ?number,
+    target ?: ? number,
+    eventCount ?: ? number,
 }>;
 
 export type TextInputKeyPressEvent =
@@ -126,7 +126,7 @@ export type TextInputKeyPressEvent =
 export type TextInputEndEditingEventData = $ReadOnly<{
   ...TargetEvent,
   eventCount: number,
-  text: string,
+    text: string,
 }>;
 
 export type TextInputEditingEvent =
@@ -299,8 +299,8 @@ export type TextInputIOSProps = $ReadOnly<{
    * @platform ios
    */
   dataDetectorTypes?:
-    | ?DataDetectorTypesType
-    | $ReadOnlyArray<DataDetectorTypesType>,
+  | ?DataDetectorTypesType
+  | $ReadOnlyArray<DataDetectorTypesType>,
 
   /**
    * If `true`, the keyboard disables the return key when there is no text and
@@ -487,7 +487,7 @@ export type TextInputAndroidProps = $ReadOnly<{
 }>;
 
 export type TextInputProps = $ReadOnly<{
-  ...$Diff<ViewProps, $ReadOnly<{style: ?ViewStyleProp}>>,
+  ...$Diff < ViewProps, $ReadOnly < { style: ? ViewStyleProp} >>,
   ...TextInputIOSProps,
   ...TextInputAndroidProps,
 
@@ -499,7 +499,7 @@ export type TextInputProps = $ReadOnly<{
    * - `sentences`: first letter of each sentence (*default*).
    * - `none`: don't auto capitalize anything.
    */
-  autoCapitalize?: ?AutoCapitalize,
+  autoCapitalize ?: ? AutoCapitalize,
 
   /**
    * Specifies autocomplete hints for the system, so it can provide autofill.
@@ -572,7 +572,7 @@ export type TextInputProps = $ReadOnly<{
    * - `tel-device`
    * - `username-new`
    */
-  autoComplete?: ?(
+  autoComplete ?: ? (
     | 'additional-name'
     | 'address-line1'
     | 'address-line2'
@@ -635,19 +635,19 @@ export type TextInputProps = $ReadOnly<{
   /**
    * If `false`, disables auto-correct. The default value is `true`.
    */
-  autoCorrect?: ?boolean,
+  autoCorrect ?: ? boolean,
 
   /**
    * If `true`, focuses the input on `componentDidMount`.
    * The default value is `false`.
    */
-  autoFocus?: ?boolean,
+  autoFocus ?: ? boolean,
 
   /**
    * Specifies whether fonts should scale to respect Text Size accessibility settings. The
    * default is `true`.
    */
-  allowFontScaling?: ?boolean,
+  allowFontScaling ?: ? boolean,
 
   /**
    * If `true`, caret is hidden. The default value is `false`.
@@ -658,26 +658,26 @@ export type TextInputProps = $ReadOnly<{
    * will cause cursor to be disabled as a side-effect.
    *
    */
-  caretHidden?: ?boolean,
+  caretHidden ?: ? boolean,
 
   /*
    * If `true`, contextMenuHidden is hidden. The default value is `false`.
    */
-  contextMenuHidden?: ?boolean,
+  contextMenuHidden ?: ? boolean,
 
   /**
    * Provides an initial value that will change when the user starts typing.
    * Useful for simple use-cases where you do not want to deal with listening
    * to events and updating the value prop to keep the controlled state in sync.
    */
-  defaultValue?: ?Stringish,
+  defaultValue ?: ? Stringish,
 
   /**
    * If `false`, text is not editable. The default value is `true`.
    */
-  editable?: ?boolean,
+  editable ?: ? boolean,
 
-  forwardedRef?: ?React.RefSetter<TextInputInstance>,
+  forwardedRef ?: ? React.RefSetter < TextInputInstance >,
 
   /**
    * `enterKeyHint` defines what action label (or icon) to present for the enter key on virtual keyboards.
@@ -692,7 +692,7 @@ export type TextInputProps = $ReadOnly<{
    * - `search`
    * - `send`
    */
-  enterKeyHint?: ?EnterKeyHintTypeOptions,
+  enterKeyHint ?: ? EnterKeyHintTypeOptions,
 
   /**
    * `inputMode` works like the `inputmode` attribute in HTML, it determines which
@@ -709,7 +709,7 @@ export type TextInputProps = $ReadOnly<{
    * - `email`
    * - `url`
    */
-  inputMode?: ?InputModeOptions,
+  inputMode ?: ? InputModeOptions,
 
   /**
    * Determines which keyboard to open, e.g.`numeric`.
@@ -741,7 +741,7 @@ export type TextInputProps = $ReadOnly<{
    * - `visible-password`
    *
    */
-  keyboardType?: ?KeyboardTypeOptions,
+  keyboardType ?: ? KeyboardTypeOptions,
 
   /**
    * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.
@@ -750,35 +750,35 @@ export type TextInputProps = $ReadOnly<{
    * `0`: no max, ignore parent/global default
    * `>= 1`: sets the maxFontSizeMultiplier of this node to this value
    */
-  maxFontSizeMultiplier?: ?number,
+  maxFontSizeMultiplier ?: ? number,
 
   /**
    * Limits the maximum number of characters that can be entered. Use this
    * instead of implementing the logic in JS to avoid flicker.
    */
-  maxLength?: ?number,
+  maxLength ?: ? number,
 
   /**
    * If `true`, the text input can be multiple lines.
    * The default value is `false`.
    */
-  multiline?: ?boolean,
+  multiline ?: ? boolean,
 
   /**
    * Callback that is called when the text input is blurred.
    */
-  onBlur?: ?(e: TextInputBlurEvent) => mixed,
+  onBlur ?: ? (e: TextInputBlurEvent) => mixed,
 
   /**
    * Callback that is called when the text input's text changes.
    */
-  onChange?: ?(e: TextInputChangeEvent) => mixed,
+  onChange ?: ? (e: TextInputChangeEvent) => mixed,
 
   /**
    * Callback that is called when the text input's text changes.
    * Changed text is passed as an argument to the callback handler.
    */
-  onChangeText?: ?(text: string) => mixed,
+  onChangeText ?: ? (text: string) => mixed,
 
   /**
    * Callback that is called when the text input's content size changes.
@@ -787,17 +787,17 @@ export type TextInputProps = $ReadOnly<{
    *
    * Only called for multiline text inputs.
    */
-  onContentSizeChange?: ?(e: TextInputContentSizeChangeEvent) => mixed,
+  onContentSizeChange ?: ? (e: TextInputContentSizeChangeEvent) => mixed,
 
   /**
    * Callback that is called when text input ends.
    */
-  onEndEditing?: ?(e: TextInputEditingEvent) => mixed,
+  onEndEditing ?: ? (e: TextInputEditingEvent) => mixed,
 
   /**
    * Callback that is called when the text input is focused.
    */
-  onFocus?: ?(e: TextInputFocusEvent) => mixed,
+  onFocus ?: ? (e: TextInputFocusEvent) => mixed,
 
   /**
    * Callback that is called when a key is pressed.
@@ -806,59 +806,59 @@ export type TextInputProps = $ReadOnly<{
    * the typed-in character otherwise including `' '` for space.
    * Fires before `onChange` callbacks.
    */
-  onKeyPress?: ?(e: TextInputKeyPressEvent) => mixed,
+  onKeyPress ?: ? (e: TextInputKeyPressEvent) => mixed,
 
   /**
    * Called when a single tap gesture is detected.
    */
-  onPress?: ?(event: GestureResponderEvent) => mixed,
+  onPress ?: ? (event: GestureResponderEvent) => mixed,
 
   /**
    * Called when a touch is engaged.
    */
-  onPressIn?: ?(event: GestureResponderEvent) => mixed,
+  onPressIn ?: ? (event: GestureResponderEvent) => mixed,
 
   /**
    * Called when a touch is released.
    */
-  onPressOut?: ?(event: GestureResponderEvent) => mixed,
+  onPressOut ?: ? (event: GestureResponderEvent) => mixed,
 
   /**
    * Callback that is called when the text input selection is changed.
    * This will be called with
    * `{ nativeEvent: { selection: { start, end } } }`.
    */
-  onSelectionChange?: ?(e: TextInputSelectionChangeEvent) => mixed,
+  onSelectionChange ?: ? (e: TextInputSelectionChangeEvent) => mixed,
 
   /**
    * Callback that is called when the text input's submit button is pressed.
    * Invalid if `multiline={true}` is specified.
    */
-  onSubmitEditing?: ?(e: TextInputEditingEvent) => mixed,
+  onSubmitEditing ?: ? (e: TextInputEditingEvent) => mixed,
 
   /**
    * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.
    * May also contain other properties from ScrollEvent but on Android contentSize
    * is not provided for performance reasons.
    */
-  onScroll?: ?(e: ScrollEvent) => mixed,
+  onScroll ?: ? (e: ScrollEvent) => mixed,
 
   /**
    * The string that will be rendered before text input has been entered.
    */
-  placeholder?: ?Stringish,
+  placeholder ?: ? Stringish,
 
   /**
    * The text color of the placeholder string.
    */
-  placeholderTextColor?: ?ColorValue,
+  placeholderTextColor ?: ? ColorValue,
 
   /** `readOnly` works like the `readonly` attribute in HTML.
    *  If `true`, text is not editable. The default value is `false`.
    *  See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly
    *  for more details.
    */
-  readOnly?: ?boolean,
+  readOnly ?: ? boolean,
 
   /**
    * Determines how the return key should look. On Android you can also use
@@ -892,38 +892,38 @@ export type TextInputProps = $ReadOnly<{
    * - `route`
    * - `yahoo`
    */
-  returnKeyType?: ?ReturnKeyTypeOptions,
+  returnKeyType ?: ? ReturnKeyTypeOptions,
 
   /**
    * If `true`, the text input obscures the text entered so that sensitive text
    * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.
    */
-  secureTextEntry?: ?boolean,
+  secureTextEntry ?: ? boolean,
 
   /**
    * The start and end of the text input's selection. Set start and end to
    * the same value to position the cursor.
    */
-  selection?: ?$ReadOnly<{
+  selection ?: ? $ReadOnly < {
     start: number,
-    end?: ?number,
-  }>,
+    end?: ? number,
+  } >,
 
   /**
    * The highlight and cursor color of the text input.
    */
-  selectionColor?: ?ColorValue,
+  selectionColor ?: ? ColorValue,
 
   /**
    * The text selection handle color.
    * @platform android
    */
-  selectionHandleColor?: ?ColorValue,
+  selectionHandleColor ?: ? ColorValue,
 
   /**
    * If `true`, all text will automatically be selected on focus.
    */
-  selectTextOnFocus?: ?boolean,
+  selectTextOnFocus ?: ? boolean,
 
   /**
    * If `true`, the text field will blur when submitted.
@@ -937,7 +937,7 @@ export type TextInputProps = $ReadOnly<{
    * override any behavior defined by `blurOnSubmit`.
    * @see submitBehavior
    */
-  blurOnSubmit?: ?boolean,
+  blurOnSubmit ?: ? boolean,
 
   /**
    * When the return key is pressed,
@@ -957,7 +957,7 @@ export type TextInputProps = $ReadOnly<{
    * - `'submit'` will only send a submit event and not blur the input
    * - `'blurAndSubmit`' will both blur the input and send a submit event
    */
-  submitBehavior?: ?SubmitBehavior,
+  submitBehavior ?: ? SubmitBehavior,
 
   /**
    * Note that not all Text styles are supported, an incomplete list of what is not supported includes:
@@ -976,7 +976,7 @@ export type TextInputProps = $ReadOnly<{
    *
    * [Styles](docs/style.html)
    */
-  style?: ?TextStyleProp,
+  style ?: ? TextStyleProp,
 
   /**
    * The value to show for the text input. `TextInput` is a controlled
@@ -987,7 +987,7 @@ export type TextInputProps = $ReadOnly<{
    * either set `editable={false}`, or set/update `maxLength` to prevent
    * unwanted edits without flicker.
    */
-  value?: ?Stringish,
+  value ?: ? Stringish,
 }>;
 
 type ViewCommands = $NonMaybeType<
@@ -1026,10 +1026,10 @@ function useTextInputStateSynchronization_STATE({
   setLastNativeText: string => void,
   setLastNativeSelection: LastNativeSelection => void,
 } {
-  const [lastNativeText, setLastNativeText] = useState<?Stringish>(props.value);
+  const [lastNativeText, setLastNativeText] = useState <? Stringish > (props.value);
   const [lastNativeSelectionState, setLastNativeSelection] =
-    useState<LastNativeSelection>({
-      selection: {start: -1, end: -1},
+    useState < LastNativeSelection > ({
+      selection: { start: -1, end: -1 },
       mostRecentEventCount: mostRecentEventCount,
     });
 
@@ -1039,7 +1039,7 @@ function useTextInputStateSynchronization_STATE({
   // that the update should be ignored and we should stick with the value
   // that we have in JS.
   useLayoutEffect(() => {
-    const nativeUpdate: {text?: string, selection?: Selection} = {};
+    const nativeUpdate: { text?: string, selection?: Selection } = {};
 
     if (lastNativeText !== props.value && typeof props.value === 'string') {
       nativeUpdate.text = props.value;
@@ -1053,7 +1053,7 @@ function useTextInputStateSynchronization_STATE({
         lastNativeSelection.end !== selection.end)
     ) {
       nativeUpdate.selection = selection;
-      setLastNativeSelection({selection, mostRecentEventCount});
+      setLastNativeSelection({ selection, mostRecentEventCount });
     }
 
     if (Object.keys(nativeUpdate).length === 0) {
@@ -1081,7 +1081,7 @@ function useTextInputStateSynchronization_STATE({
     viewCommands,
   ]);
 
-  return {setLastNativeText, setLastNativeSelection};
+  return { setLastNativeText, setLastNativeSelection };
 }
 
 /**
@@ -1107,9 +1107,9 @@ function useTextInputStateSynchronization_REFS({
   setLastNativeText: string => void,
   setLastNativeSelection: LastNativeSelection => void,
 } {
-  const lastNativeTextRef = useRef<?Stringish>(props.value);
-  const lastNativeSelectionRef = useRef<LastNativeSelection>({
-    selection: {start: -1, end: -1},
+  const lastNativeTextRef = useRef <? Stringish > (props.value);
+  const lastNativeSelectionRef = useRef < LastNativeSelection > ({
+    selection: { start: -1, end: -1 },
     mostRecentEventCount: mostRecentEventCount,
   });
 
@@ -1117,7 +1117,7 @@ function useTextInputStateSynchronization_REFS({
   // that the update should be ignored and we should stick with the value
   // that we have in JS.
   useLayoutEffect(() => {
-    const nativeUpdate: {text?: string, selection?: Selection} = {};
+    const nativeUpdate: { text?: string, selection?: Selection } = {};
 
     const lastNativeSelection = lastNativeSelectionRef.current.selection;
 
@@ -1136,7 +1136,7 @@ function useTextInputStateSynchronization_REFS({
         lastNativeSelection.end !== selection.end)
     ) {
       nativeUpdate.selection = selection;
-      lastNativeSelectionRef.current = {selection, mostRecentEventCount};
+      lastNativeSelectionRef.current = { selection, mostRecentEventCount };
     }
 
     if (Object.keys(nativeUpdate).length === 0) {
@@ -1300,15 +1300,15 @@ function InternalTextInput(props: TextInputProps): React.Node {
     ...otherProps
   } = props;
 
-  const inputRef = useRef<null | TextInputInstance>(null);
+  const inputRef = useRef < null | TextInputInstance > (null);
 
   const selection: ?Selection =
     propsSelection == null
       ? null
       : {
-          start: propsSelection.start,
-          end: propsSelection.end ?? propsSelection.start,
-        };
+        start: propsSelection.start,
+        end: propsSelection.end ?? propsSelection.start,
+      };
 
   const text =
     typeof props.value === 'string'
@@ -1323,12 +1323,12 @@ function InternalTextInput(props: TextInputProps): React.Node {
       ? RCTMultilineTextInputNativeCommands
       : RCTSinglelineTextInputNativeCommands);
 
-  const [mostRecentEventCount, setMostRecentEventCount] = useState<number>(0);
+  const [mostRecentEventCount, setMostRecentEventCount] = useState < number > (0);
   const useTextInputStateSynchronization =
     ReactNativeFeatureFlags.useRefsForTextInputState()
       ? useTextInputStateSynchronization_REFS
       : useTextInputStateSynchronization_STATE;
-  const {setLastNativeText, setLastNativeSelection} =
+  const { setLastNativeText, setLastNativeSelection } =
     useTextInputStateSynchronization({
       props,
       inputRef,
@@ -1420,7 +1420,7 @@ function InternalTextInput(props: TextInputProps): React.Node {
   );
 
   // $FlowExpectedError[incompatible-call]
-  const ref = useMergeRefs<HostInstance>(setLocalRef, props.forwardedRef);
+  const ref = useMergeRefs < HostInstance > (setLocalRef, props.forwardedRef);
 
   const _onChange = (event: TextInputChangeEvent) => {
     const currentText = event.nativeEvent.text;
@@ -1548,7 +1548,7 @@ function InternalTextInput(props: TextInputProps): React.Node {
 
   // TextInput handles onBlur and onFocus events
   // so omitting onBlur and onFocus pressability handlers here.
-  const {onBlur, onFocus, ...eventHandlers} = usePressability(config);
+  const { onBlur, onFocus, ...eventHandlers } = usePressability(config);
 
   let _accessibilityState;
   if (
@@ -1570,18 +1570,18 @@ function InternalTextInput(props: TextInputProps): React.Node {
 
   // Keep the original (potentially nested) style when possible, as React can diff these more efficiently
   let _style = props.style;
-  const flattenedStyle = flattenStyle<TextStyleProp>(props.style);
+  const flattenedStyle = flattenStyle < TextStyleProp > (props.style);
   if (flattenedStyle != null) {
-    let overrides: ?{...TextStyleInternal} = null;
+    let overrides: ?{...TextStyleInternal } = null;
     if (typeof flattenedStyle?.fontWeight === 'number') {
-      overrides = overrides || ({}: {...TextStyleInternal});
+      overrides = overrides || ({}: {...TextStyleInternal });
       overrides.fontWeight =
         // $FlowFixMe[incompatible-cast]
         (flattenedStyle.fontWeight.toString(): TextStyleInternal['fontWeight']);
     }
 
     if (flattenedStyle.verticalAlign != null) {
-      overrides = overrides || ({}: {...TextStyleInternal});
+      overrides = overrides || ({}: {...TextStyleInternal });
       overrides.textAlignVertical =
         verticalAlignToTextAlignVerticalMap[flattenedStyle.verticalAlign];
       overrides.verticalAlign = undefined;
@@ -1805,10 +1805,7 @@ const autoCompleteWebToTextContentTypeMap = {
   username: 'username',
 };
 
-const ExportedForwardRef: component(
-  ref: React.RefSetter<TextInputInstance>,
-  ...props: React.ElementConfig<typeof InternalTextInput>
-) = React.forwardRef(function TextInput(
+const ExportedForwardRef = React.forwardRef(function TextInput(
   {
     allowFontScaling = true,
     rejectResponderTermination = true,
@@ -1844,20 +1841,20 @@ const ExportedForwardRef: component(
       autoComplete={
         Platform.OS === 'android'
           ? // $FlowFixMe[invalid-computed-prop]
-            // $FlowFixMe[prop-missing]
-            autoCompleteWebToAutoCompleteAndroidMap[autoComplete] ??
-            autoComplete
+          // $FlowFixMe[prop-missing]
+          autoCompleteWebToAutoCompleteAndroidMap[autoComplete] ??
+          autoComplete
           : undefined
       }
       textContentType={
         textContentType != null
           ? textContentType
           : Platform.OS === 'ios' &&
-              autoComplete &&
-              autoComplete in autoCompleteWebToTextContentTypeMap
+            autoComplete &&
+            autoComplete in autoCompleteWebToTextContentTypeMap
             ? // $FlowFixMe[invalid-computed-prop]
-              // $FlowFixMe[prop-missing]
-              autoCompleteWebToTextContentTypeMap[autoComplete]
+            // $FlowFixMe[prop-missing]
+            autoCompleteWebToTextContentTypeMap[autoComplete]
             : textContentType
       }
       {...restProps}
@@ -1903,4 +1900,4 @@ const verticalAlignToTextAlignVerticalMap = {
 };
 
 // $FlowFixMe[unclear-type] Unclear type. Using `any` type is not safe.
-export default ExportedForwardRef as any as TextInputType;
+export default ExportedForwardRef;
diff --git a/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js b/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js
index feca6c9..c944821 100644
--- a/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js
+++ b/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js
@@ -402,10 +402,7 @@ class TouchableHighlightImpl extends React.Component<
   }
 }
 
-const TouchableHighlight: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...props: $ReadOnly<$Diff<TouchableHighlightProps, {+hostRef: mixed}>>
-) = React.forwardRef((props, hostRef) => (
+const TouchableHighlight = React.forwardRef((props, hostRef) => (
   <TouchableHighlightImpl {...props} hostRef={hostRef} />
 ));
 
diff --git a/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js b/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js
index eeb08c8..af81986 100644
--- a/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js
+++ b/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js
@@ -369,10 +369,7 @@ class TouchableOpacity extends React.Component<TouchableOpacityProps, State> {
   }
 }
 
-const Touchable: component(
-  ref?: React.RefSetter<React.ElementRef<typeof Animated.View>>,
-  ...props: TouchableOpacityProps
-) = React.forwardRef((props, ref) => (
+const Touchable = React.forwardRef((props, ref) => (
   <TouchableOpacity {...props} hostRef={ref} />
 ));
 
diff --git a/node_modules/react-native/Libraries/Components/View/View.js b/node_modules/react-native/Libraries/Components/View/View.js
index 4f13e1e..daeb9c5 100644
--- a/node_modules/react-native/Libraries/Components/View/View.js
+++ b/node_modules/react-native/Libraries/Components/View/View.js
@@ -8,7 +8,7 @@
  * @flow strict-local
  */
 
-import type {ViewProps} from './ViewPropTypes';
+import type { ViewProps } from './ViewPropTypes';
 
 import TextAncestor from '../../Text/TextAncestor';
 import ViewNativeComponent from './ViewNativeComponent';
@@ -23,10 +23,7 @@ export type Props = ViewProps;
  *
  * @see https://reactnative.dev/docs/view
  */
-const View: component(
-  ref?: React.RefSetter<React.ElementRef<typeof ViewNativeComponent>>,
-  ...props: ViewProps
-) = React.forwardRef(
+const View = React.forwardRef(
   (
     {
       accessibilityElementsHidden,
diff --git a/node_modules/react-native/Libraries/Core/Devtools/parseErrorStack.js b/node_modules/react-native/Libraries/Core/Devtools/parseErrorStack.js
index a755cae..7e770e6 100644
--- a/node_modules/react-native/Libraries/Core/Devtools/parseErrorStack.js
+++ b/node_modules/react-native/Libraries/Core/Devtools/parseErrorStack.js
@@ -10,8 +10,8 @@
 
 'use strict';
 
-import type {StackFrame} from '../NativeExceptionsManager';
-import type {HermesParsedStack} from './parseHermesStack';
+import type { StackFrame } from '../NativeExceptionsManager';
+import type { HermesParsedStack } from './parseHermesStack';
 
 const parseHermesStack = require('./parseHermesStack').default;
 
diff --git a/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js b/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js
index fbb16ba..2737f31 100644
--- a/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js
+++ b/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js
@@ -10,7 +10,7 @@
 
 'use strict';
 
-import type {StackFrame} from '../NativeExceptionsManager';
+import type { StackFrame } from '../NativeExceptionsManager';
 
 const getDevServer = require('./getDevServer').default;
 
diff --git a/node_modules/react-native/Libraries/Core/ExceptionsManager.js b/node_modules/react-native/Libraries/Core/ExceptionsManager.js
index 05160ce..94eab86 100644
--- a/node_modules/react-native/Libraries/Core/ExceptionsManager.js
+++ b/node_modules/react-native/Libraries/Core/ExceptionsManager.js
@@ -10,8 +10,8 @@
 
 'use strict';
 
-import type {ExtendedError} from './ExtendedError';
-import type {ExceptionData} from './NativeExceptionsManager';
+import type { ExtendedError } from './ExtendedError';
+import type { ExceptionData } from './NativeExceptionsManager';
 
 export class SyntheticError extends Error {
   name: string = '';
diff --git a/node_modules/react-native/Libraries/Core/RawEventEmitter.js b/node_modules/react-native/Libraries/Core/RawEventEmitter.js
index 70bfbd5..f64ae77 100644
--- a/node_modules/react-native/Libraries/Core/RawEventEmitter.js
+++ b/node_modules/react-native/Libraries/Core/RawEventEmitter.js
@@ -8,7 +8,7 @@
  * @format
  */
 
-import type {IEventEmitter} from '../vendor/emitter/EventEmitter';
+import type { IEventEmitter } from '../vendor/emitter/EventEmitter';
 
 import EventEmitter from '../vendor/emitter/EventEmitter';
 
diff --git a/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js b/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js
index 6807a9b..59846f6 100644
--- a/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js
+++ b/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js
@@ -8,7 +8,7 @@
  * @flow strict-local
  */
 
-import type {ExtendedError} from './ExtendedError';
+import type { ExtendedError } from './ExtendedError';
 
 import ExceptionsManager, {SyntheticError} from './ExceptionsManager';
 
diff --git a/node_modules/react-native/Libraries/Core/setUpReactDevTools.js b/node_modules/react-native/Libraries/Core/setUpReactDevTools.js
index 285ef93..866c5c4 100644
--- a/node_modules/react-native/Libraries/Core/setUpReactDevTools.js
+++ b/node_modules/react-native/Libraries/Core/setUpReactDevTools.js
@@ -10,8 +10,8 @@
 
 'use strict';
 
-import type {Domain} from '../../src/private/debugging/setUpFuseboxReactDevToolsDispatcher';
-import type {Spec as NativeReactDevToolsRuntimeSettingsModuleSpec} from '../../src/private/fusebox/specs/NativeReactDevToolsRuntimeSettingsModule';
+import type { Domain } from '../../src/private/debugging/setUpFuseboxReactDevToolsDispatcher';
+import type { Spec as NativeReactDevToolsRuntimeSettingsModuleSpec } from '../../src/private/fusebox/specs/NativeReactDevToolsRuntimeSettingsModule';
 
 if (__DEV__) {
   if (typeof global.queueMicrotask !== 'function') {
diff --git a/node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js b/node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js
index 3d0c52a..59ef0bc 100644
--- a/node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js
+++ b/node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js
@@ -102,9 +102,6 @@ const styles = StyleSheet.create({
   },
 });
 
-const DebuggingOverlayWithForwardedRef: component(
-  ref: React.RefSetter<DebuggingOverlayHandle>,
-  ...props: {}
-) = React.forwardRef(DebuggingOverlay);
+const DebuggingOverlayWithForwardedRef = React.forwardRef(DebuggingOverlay);
 
 export default DebuggingOverlayWithForwardedRef;
diff --git a/node_modules/react-native/Libraries/Lists/FlatList.js b/node_modules/react-native/Libraries/Lists/FlatList.js
index d1240ae..9b5fc28 100644
--- a/node_modules/react-native/Libraries/Lists/FlatList.js
+++ b/node_modules/react-native/Libraries/Lists/FlatList.js
@@ -9,13 +9,11 @@
  */
 
 import typeof ScrollViewNativeComponent from '../Components/ScrollView/ScrollViewNativeComponent';
-import type {ViewStyleProp} from '../StyleSheet/StyleSheet';
-import type {
-  ListRenderItem,
+import type { ViewStyleProp } from '../StyleSheet/StyleSheet';
+import type { ListRenderItem,
   ListRenderItemInfo,
   ViewabilityConfigCallbackPair,
-  ViewToken,
-} from '@react-native/virtualized-lists';
+  ViewToken, } from '@react-native/virtualized-lists';
 
 import * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';
 import {type ScrollResponderType} from '../Components/ScrollView/ScrollView';
diff --git a/node_modules/react-native/Libraries/Lists/SectionList.js b/node_modules/react-native/Libraries/Lists/SectionList.js
index 98f38ed..3f3208a 100644
--- a/node_modules/react-native/Libraries/Lists/SectionList.js
+++ b/node_modules/react-native/Libraries/Lists/SectionList.js
@@ -10,12 +10,10 @@
 
 'use strict';
 
-import type {ScrollResponderType} from '../Components/ScrollView/ScrollView';
-import type {
-  ScrollToLocationParamsType,
+import type { ScrollResponderType } from '../Components/ScrollView/ScrollView';
+import type { ScrollToLocationParamsType,
   SectionBase as _SectionBase,
-  VirtualizedSectionListProps,
-} from '@react-native/virtualized-lists';
+  VirtualizedSectionListProps, } from '@react-native/virtualized-lists';
 
 import Platform from '../Utilities/Platform';
 import VirtualizedLists from '@react-native/virtualized-lists';
diff --git a/node_modules/react-native/Libraries/Lists/SectionListModern.js b/node_modules/react-native/Libraries/Lists/SectionListModern.js
index b1826cb..ff42731 100644
--- a/node_modules/react-native/Libraries/Lists/SectionListModern.js
+++ b/node_modules/react-native/Libraries/Lists/SectionListModern.js
@@ -174,10 +174,7 @@ export type Props<SectionT: SectionBase<any>> = $ReadOnly<{
  *   Alternatively, you can provide a custom `keyExtractor` prop.
  *
  */
-const SectionList: component(
-  ref?: React.RefSetter<any>,
-  ...Props<SectionBase<any>>
-) = forwardRef<Props<SectionBase<any>>, any>((props, ref) => {
+const SectionList = forwardRef<Props<SectionBase<any>>, any>((props, ref) => {
   const propsWithDefaults = {
     stickySectionHeadersEnabled: Platform.OS === 'ios',
     ...props,
diff --git a/node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js b/node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js
index 0f10943..1dd0fea 100644
--- a/node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js
+++ b/node_modules/react-native/Libraries/NativeComponent/BaseViewConfig.android.js
@@ -8,7 +8,7 @@
  * @flow strict-local
  */
 
-import type {PartialViewConfigWithoutName} from './PlatformBaseViewConfig';
+import type { PartialViewConfigWithoutName } from './PlatformBaseViewConfig';
 
 import * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';
 import NativeReactNativeFeatureFlags from '../../src/private/featureflags/specs/NativeReactNativeFeatureFlags';
diff --git a/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js b/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js
index 84f77f5..829ed4b 100644
--- a/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js
+++ b/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js
@@ -8,11 +8,9 @@
  * @format
  */
 
-import type {HostComponent} from '../../src/private/types/HostComponent';
-import type {
-  PartialViewConfig,
-  ViewConfig,
-} from '../Renderer/shims/ReactNativeTypes';
+import type { HostComponent } from '../../src/private/types/HostComponent';
+import type { PartialViewConfig,
+  ViewConfig, } from '../Renderer/shims/ReactNativeTypes';
 
 import getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';
 import UIManager from '../ReactNative/UIManager';
diff --git a/node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js b/node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js
index bdc40c3..da09069 100644
--- a/node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js
+++ b/node_modules/react-native/Libraries/NativeComponent/PlatformBaseViewConfig.js
@@ -8,7 +8,7 @@
  * @flow strict-local
  */
 
-import type {PartialViewConfig} from '../Renderer/shims/ReactNativeTypes';
+import type { PartialViewConfig } from '../Renderer/shims/ReactNativeTypes';
 
 import BaseViewConfig from './BaseViewConfig';
 
diff --git a/node_modules/react-native/Libraries/ReactNative/AppContainer.js b/node_modules/react-native/Libraries/ReactNative/AppContainer.js
index 22005d4..4274a1e 100644
--- a/node_modules/react-native/Libraries/ReactNative/AppContainer.js
+++ b/node_modules/react-native/Libraries/ReactNative/AppContainer.js
@@ -24,7 +24,7 @@ export type Props = $ReadOnly<{
   internal_excludeInspector?: boolean,
 }>;
 
-const AppContainer: component(...Props) = __DEV__
+const AppContainer = __DEV__
   ? require('./AppContainer-dev').default
   : require('./AppContainer-prod').default;
 
diff --git a/node_modules/react-native/Libraries/ReactNative/I18nManager.js b/node_modules/react-native/Libraries/ReactNative/I18nManager.js
index 48e0e03..6339b2f 100644
--- a/node_modules/react-native/Libraries/ReactNative/I18nManager.js
+++ b/node_modules/react-native/Libraries/ReactNative/I18nManager.js
@@ -56,7 +56,6 @@ export default {
     NativeI18nManager.swapLeftAndRightInRTL(flipStyles);
   },
 
-  isRTL: i18nConstants.isRTL as I18nManagerConstants['isRTL'],
-  doLeftAndRightSwapInRTL:
-    i18nConstants.doLeftAndRightSwapInRTL as I18nManagerConstants['doLeftAndRightSwapInRTL'],
+  isRTL: i18nConstants.isRTL,
+  doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL,
 };
diff --git a/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js b/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js
index 6b58118..c67cc2a 100644
--- a/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js
+++ b/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js
@@ -10,7 +10,7 @@
 
 import * as React from 'react';
 
-type NoopComponent = component(children: React.Node);
+type NoopComponent = React.ComponentType<any>;
 
 const cache: Map<
   string, // displayName
diff --git a/node_modules/react-native/Libraries/ReactNative/renderApplication.js b/node_modules/react-native/Libraries/ReactNative/renderApplication.js
index de0f461..936548a 100644
--- a/node_modules/react-native/Libraries/ReactNative/renderApplication.js
+++ b/node_modules/react-native/Libraries/ReactNative/renderApplication.js
@@ -23,12 +23,7 @@ import * as React from 'react';
 // require BackHandler so it sets the default handler that exits the app if no listeners respond
 import '../Utilities/BackHandler';
 
-type ActivityType = component(
-  ...{
-    mode: 'visible' | 'hidden',
-    children: React.Node,
-  }
-);
+type ActivityType = React.ComponentType<any>;
 
 export default function renderApplication<Props: Object>(
   RootComponent: React.ComponentType<Props>,
diff --git a/node_modules/react-native/Libraries/Renderer/shims/ReactFabric.js b/node_modules/react-native/Libraries/Renderer/shims/ReactFabric.js
index 15eeeb3..35d5647 100644
--- a/node_modules/react-native/Libraries/Renderer/shims/ReactFabric.js
+++ b/node_modules/react-native/Libraries/Renderer/shims/ReactFabric.js
@@ -14,7 +14,7 @@
 
 import {BatchedBridge} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';
 
-import type {ReactFabricType} from './ReactNativeTypes';
+import type { ReactFabricType } from './ReactNativeTypes';
 
 let ReactFabric: ReactFabricType;
 
diff --git a/node_modules/react-native/Libraries/Renderer/shims/ReactNative.js b/node_modules/react-native/Libraries/Renderer/shims/ReactNative.js
index 490372c..2770afd 100644
--- a/node_modules/react-native/Libraries/Renderer/shims/ReactNative.js
+++ b/node_modules/react-native/Libraries/Renderer/shims/ReactNative.js
@@ -11,7 +11,7 @@
  */
 'use strict';
 
-import type {ReactNativeType} from './ReactNativeTypes';
+import type { ReactNativeType } from './ReactNativeTypes';
 
 let ReactNative: ReactNativeType;
 
diff --git a/node_modules/react-native/Libraries/Renderer/shims/ReactNativeTypes.js b/node_modules/react-native/Libraries/Renderer/shims/ReactNativeTypes.js
index 03b9574..155397b 100644
--- a/node_modules/react-native/Libraries/Renderer/shims/ReactNativeTypes.js
+++ b/node_modules/react-native/Libraries/Renderer/shims/ReactNativeTypes.js
@@ -10,22 +10,18 @@
  * @generated SignedSource<<5c76b092e0c981f96ca894e381ee593b>>
  */
 
-import type {
-  Component as ReactComponent,
+import type { Component as ReactComponent,
   ElementRef,
   ElementType,
-  MixedElement,
-} from 'react';
-import type {
-  // $FlowFixMe[nonstrict-import] TODO(@rubennorte)
+  MixedElement, } from 'react';
+import type { // $FlowFixMe[nonstrict-import] TODO(@rubennorte)
   MeasureOnSuccessCallback,
   // $FlowFixMe[nonstrict-import] TODO(@rubennorte)
   PublicInstance,
   // $FlowFixMe[nonstrict-import] TODO(@rubennorte)
   PublicRootInstance,
   // $FlowFixMe[nonstrict-import] TODO(@rubennorte)
-  PublicTextInstance,
-} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';
+  PublicTextInstance, } from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';
 
 export type AttributeType<T, V> =
   | true
diff --git a/node_modules/react-native/Libraries/Text/Text.js b/node_modules/react-native/Libraries/Text/Text.js
index 52bf37f..1baba3b 100644
--- a/node_modules/react-native/Libraries/Text/Text.js
+++ b/node_modules/react-native/Libraries/Text/Text.js
@@ -35,10 +35,7 @@ type TextForwardRef = React.ElementRef<
  *
  * @see https://reactnative.dev/docs/text
  */
-const Text: component(
-  ref?: React.RefSetter<TextForwardRef>,
-  ...props: TextProps
-) = React.forwardRef(
+const Text = React.forwardRef(
   (
     {
       accessible,
@@ -477,10 +474,7 @@ type NativePressableTextProps = $ReadOnly<{
  * This logic is split out from the main Text component to enable the more
  * expensive pressability logic to be only initialized when needed.
  */
-const NativePressableVirtualText: component(
-  ref: React.RefSetter<TextForwardRef>,
-  ...props: NativePressableTextProps
-) = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {
+const NativePressableVirtualText = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {
   const [isHighlighted, eventHandlersForText] = useTextPressability(
     textPressabilityProps,
   );
@@ -502,10 +496,7 @@ const NativePressableVirtualText: component(
  * This logic is split out from the main Text component to enable the more
  * expensive pressability logic to be only initialized when needed.
  */
-const NativePressableText: component(
-  ref: React.RefSetter<TextForwardRef>,
-  ...props: NativePressableTextProps
-) = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {
+const NativePressableText = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {
   const [isHighlighted, eventHandlersForText] = useTextPressability(
     textPressabilityProps,
   );
diff --git a/node_modules/react-native/Libraries/Types/CodegenTypes.js b/node_modules/react-native/Libraries/Types/CodegenTypes.js
index 6d66d45..49bad2f 100644
--- a/node_modules/react-native/Libraries/Types/CodegenTypes.js
+++ b/node_modules/react-native/Libraries/Types/CodegenTypes.js
@@ -10,8 +10,8 @@
 
 'use strict';
 
-import type {EventSubscription} from '../vendor/emitter/EventEmitter';
-import type {NativeSyntheticEvent} from './CoreEventTypes';
+import type { EventSubscription } from '../vendor/emitter/EventEmitter';
+import type { NativeSyntheticEvent } from './CoreEventTypes';
 
 // Event types
 // We're not using the PaperName, it is only used to codegen view config settings
diff --git a/node_modules/react-native/Libraries/Types/CoreEventTypes.js b/node_modules/react-native/Libraries/Types/CoreEventTypes.js
index 003ed7e..b578e40 100644
--- a/node_modules/react-native/Libraries/Types/CoreEventTypes.js
+++ b/node_modules/react-native/Libraries/Types/CoreEventTypes.js
@@ -8,7 +8,7 @@
  * @format
  */
 
-import type {HostInstance} from '../../src/private/types/HostInstance';
+import type { HostInstance } from '../../src/private/types/HostInstance';
 
 export type NativeSyntheticEvent<+T> = $ReadOnly<{
   bubbles: ?boolean,
diff --git a/node_modules/react-native/Libraries/WebSocket/WebSocket_new.js b/node_modules/react-native/Libraries/WebSocket/WebSocket_new.js
index 3062613..8e7bf3c 100644
--- a/node_modules/react-native/Libraries/WebSocket/WebSocket_new.js
+++ b/node_modules/react-native/Libraries/WebSocket/WebSocket_new.js
@@ -8,9 +8,9 @@
  * @flow
  */
 
-import type {EventCallback} from '../../src/private/webapis/dom/events/EventTarget';
-import type {BlobData} from '../Blob/BlobTypes';
-import type {EventSubscription} from '../vendor/emitter/EventEmitter';
+import type { EventCallback } from '../../src/private/webapis/dom/events/EventTarget';
+import type { BlobData } from '../Blob/BlobTypes';
+import type { EventSubscription } from '../vendor/emitter/EventEmitter';
 
 import Event from '../../src/private/webapis/dom/events/Event';
 import {
diff --git a/node_modules/react-native/Libraries/WebSocket/WebSocket_old.js b/node_modules/react-native/Libraries/WebSocket/WebSocket_old.js
index 348161a..935a3ea 100644
--- a/node_modules/react-native/Libraries/WebSocket/WebSocket_old.js
+++ b/node_modules/react-native/Libraries/WebSocket/WebSocket_old.js
@@ -8,8 +8,8 @@
  * @flow
  */
 
-import type {BlobData} from '../Blob/BlobTypes';
-import type {EventSubscription} from '../vendor/emitter/EventEmitter';
+import type { BlobData } from '../Blob/BlobTypes';
+import type { EventSubscription } from '../vendor/emitter/EventEmitter';
 
 import Blob from '../Blob/Blob';
 import BlobManager from '../Blob/BlobManager';
diff --git a/node_modules/react-native/index.js b/node_modules/react-native/index.js
index 346b788..87ce00f 100644
--- a/node_modules/react-native/index.js
+++ b/node_modules/react-native/index.js
@@ -81,8 +81,8 @@ module.exports = {
     warnOnce(
       'progress-bar-android-moved',
       'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' +
-        "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " +
-        'See https://github.com/react-native-progress-view/progress-bar-android',
+      "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " +
+      'See https://github.com/react-native-progress-view/progress-bar-android',
     );
     return require('./Libraries/Components/ProgressBarAndroid/ProgressBarAndroid')
       .default;
@@ -168,8 +168,8 @@ module.exports = {
     warnOnce(
       'clipboard-moved',
       'Clipboard has been extracted from react-native core and will be removed in a future release. ' +
-        "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " +
-        'See https://github.com/react-native-clipboard/clipboard',
+      "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " +
+      'See https://github.com/react-native-clipboard/clipboard',
     );
     return require('./Libraries/Components/Clipboard/Clipboard').default;
   },
@@ -232,8 +232,8 @@ module.exports = {
     warnOnce(
       'pushNotificationIOS-moved',
       'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' +
-        "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " +
-        'See https://github.com/react-native-push-notification/ios',
+      "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " +
+      'See https://github.com/react-native-push-notification/ios',
     );
     return require('./Libraries/PushNotificationIOS/PushNotificationIOS')
       .default;
@@ -310,7 +310,7 @@ module.exports = {
     return require('./Libraries/ReactNative/RootTag').RootTagContext;
   },
   // #endregion
-} as ReactNativePublicAPI;
+}; // ReactNativePublicAPI
 
 if (__DEV__) {
   /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
@@ -323,9 +323,9 @@ if (__DEV__) {
       invariant(
         false,
         'ART has been removed from React Native. ' +
-          "Please upgrade to use either 'react-native-svg' or a similar package. " +
-          "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/art' package. " +
-          'See https://github.com/react-native-art/art',
+        "Please upgrade to use either 'react-native-svg' or a similar package. " +
+        "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/art' package. " +
+        'See https://github.com/react-native-art/art',
       );
     },
   });
@@ -340,8 +340,8 @@ if (__DEV__) {
       invariant(
         false,
         'ListView has been removed from React Native. ' +
-          'See https://fb.me/nolistview for more information or use ' +
-          '`deprecated-react-native-listview`.',
+        'See https://fb.me/nolistview for more information or use ' +
+        '`deprecated-react-native-listview`.',
       );
     },
   });
@@ -356,8 +356,8 @@ if (__DEV__) {
       invariant(
         false,
         'SwipeableListView has been removed from React Native. ' +
-          'See https://fb.me/nolistview for more information or use ' +
-          '`deprecated-react-native-swipeable-listview`.',
+        'See https://fb.me/nolistview for more information or use ' +
+        '`deprecated-react-native-swipeable-listview`.',
       );
     },
   });
@@ -372,8 +372,8 @@ if (__DEV__) {
       invariant(
         false,
         'WebView has been removed from React Native. ' +
-          "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " +
-          'See https://github.com/react-native-webview/react-native-webview',
+        "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " +
+        'See https://github.com/react-native-webview/react-native-webview',
       );
     },
   });
@@ -388,8 +388,8 @@ if (__DEV__) {
       invariant(
         false,
         'NetInfo has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-community/netinfo' instead of 'react-native'. " +
-          'See https://github.com/react-native-netinfo/react-native-netinfo',
+        "It can now be installed and imported from '@react-native-community/netinfo' instead of 'react-native'. " +
+        'See https://github.com/react-native-netinfo/react-native-netinfo',
       );
     },
   });
@@ -404,8 +404,8 @@ if (__DEV__) {
       invariant(
         false,
         'CameraRoll has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-camera-roll/camera-roll' instead of 'react-native'. " +
-          'See https://github.com/react-native-cameraroll/react-native-cameraroll',
+        "It can now be installed and imported from '@react-native-camera-roll/camera-roll' instead of 'react-native'. " +
+        'See https://github.com/react-native-cameraroll/react-native-cameraroll',
       );
     },
   });
@@ -420,9 +420,9 @@ if (__DEV__) {
       invariant(
         false,
         'ImageStore has been removed from React Native. ' +
-          'To get a base64-encoded string from a local image use either of the following third-party libraries:' +
-          "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" +
-          "* react-native-fs: `readFile(filepath, 'base64')`",
+        'To get a base64-encoded string from a local image use either of the following third-party libraries:' +
+        "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" +
+        "* react-native-fs: `readFile(filepath, 'base64')`",
       );
     },
   });
@@ -437,8 +437,8 @@ if (__DEV__) {
       invariant(
         false,
         'ImageEditor has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-community/image-editor' instead of 'react-native'. " +
-          'See https://github.com/callstack/react-native-image-editor',
+        "It can now be installed and imported from '@react-native-community/image-editor' instead of 'react-native'. " +
+        'See https://github.com/callstack/react-native-image-editor',
       );
     },
   });
@@ -453,8 +453,8 @@ if (__DEV__) {
       invariant(
         false,
         'TimePickerAndroid has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " +
-          'See https://github.com/react-native-datetimepicker/datetimepicker',
+        "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " +
+        'See https://github.com/react-native-datetimepicker/datetimepicker',
       );
     },
   });
@@ -469,8 +469,8 @@ if (__DEV__) {
       invariant(
         false,
         'ToolbarAndroid has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-community/toolbar-android' instead of 'react-native'. " +
-          'See https://github.com/react-native-toolbar-android/toolbar-android',
+        "It can now be installed and imported from '@react-native-community/toolbar-android' instead of 'react-native'. " +
+        'See https://github.com/react-native-toolbar-android/toolbar-android',
       );
     },
   });
@@ -485,8 +485,8 @@ if (__DEV__) {
       invariant(
         false,
         'ViewPagerAndroid has been removed from React Native. ' +
-          "It can now be installed and imported from 'react-native-pager-view' instead of 'react-native'. " +
-          'See https://github.com/callstack/react-native-pager-view',
+        "It can now be installed and imported from 'react-native-pager-view' instead of 'react-native'. " +
+        'See https://github.com/callstack/react-native-pager-view',
       );
     },
   });
@@ -501,8 +501,8 @@ if (__DEV__) {
       invariant(
         false,
         'CheckBox has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " +
-          'See https://github.com/react-native-checkbox/react-native-checkbox',
+        "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " +
+        'See https://github.com/react-native-checkbox/react-native-checkbox',
       );
     },
   });
@@ -517,8 +517,8 @@ if (__DEV__) {
       invariant(
         false,
         'SegmentedControlIOS has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-segmented-control/segmented-control' instead of 'react-native'." +
-          'See https://github.com/react-native-segmented-control/segmented-control',
+        "It can now be installed and imported from '@react-native-segmented-control/segmented-control' instead of 'react-native'." +
+        'See https://github.com/react-native-segmented-control/segmented-control',
       );
     },
   });
@@ -533,8 +533,8 @@ if (__DEV__) {
       invariant(
         false,
         'StatusBarIOS has been removed from React Native. ' +
-          'Has been merged with StatusBar. ' +
-          'See https://reactnative.dev/docs/statusbar',
+        'Has been merged with StatusBar. ' +
+        'See https://reactnative.dev/docs/statusbar',
       );
     },
   });
@@ -549,8 +549,8 @@ if (__DEV__) {
       invariant(
         false,
         'PickerIOS has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " +
-          'See https://github.com/react-native-picker/picker',
+        "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " +
+        'See https://github.com/react-native-picker/picker',
       );
     },
   });
@@ -565,8 +565,8 @@ if (__DEV__) {
       invariant(
         false,
         'Picker has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " +
-          'See https://github.com/react-native-picker/picker',
+        "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " +
+        'See https://github.com/react-native-picker/picker',
       );
     },
   });
@@ -580,8 +580,8 @@ if (__DEV__) {
       invariant(
         false,
         'DatePickerAndroid has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " +
-          'See https://github.com/react-native-datetimepicker/datetimepicker',
+        "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " +
+        'See https://github.com/react-native-datetimepicker/datetimepicker',
       );
     },
   });
@@ -595,8 +595,8 @@ if (__DEV__) {
       invariant(
         false,
         'MaskedViewIOS has been removed from React Native. ' +
-          "It can now be installed and imported from '@react-native-masked-view/masked-view' instead of 'react-native'. " +
-          'See https://github.com/react-native-masked-view/masked-view',
+        "It can now be installed and imported from '@react-native-masked-view/masked-view' instead of 'react-native'. " +
+        'See https://github.com/react-native-masked-view/masked-view',
       );
     },
   });
@@ -610,8 +610,8 @@ if (__DEV__) {
       invariant(
         false,
         'AsyncStorage has been removed from react-native core. ' +
-          "It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. " +
-          'See https://github.com/react-native-async-storage/async-storage',
+        "It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. " +
+        'See https://github.com/react-native-async-storage/async-storage',
       );
     },
   });
@@ -625,9 +625,9 @@ if (__DEV__) {
       invariant(
         false,
         'ImagePickerIOS has been removed from React Native. ' +
-          "Please upgrade to use either 'react-native-image-picker' or 'expo-image-picker'. " +
-          "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " +
-          'See https://github.com/rnc-archive/react-native-image-picker-ios',
+        "Please upgrade to use either 'react-native-image-picker' or 'expo-image-picker'. " +
+        "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " +
+        'See https://github.com/rnc-archive/react-native-image-picker-ios',
       );
     },
   });
@@ -641,8 +641,8 @@ if (__DEV__) {
       invariant(
         false,
         'ProgressViewIOS has been removed from react-native core. ' +
-          "It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. " +
-          'See https://github.com/react-native-progress-view/progress-view',
+        "It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. " +
+        'See https://github.com/react-native-progress-view/progress-view',
       );
     },
   });
@@ -656,8 +656,8 @@ if (__DEV__) {
       invariant(
         false,
         'DatePickerIOS has been removed from react-native core. ' +
-          "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " +
-          'See https://github.com/react-native-datetimepicker/datetimepicker',
+        "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " +
+        'See https://github.com/react-native-datetimepicker/datetimepicker',
       );
     },
   });
@@ -671,8 +671,8 @@ if (__DEV__) {
       invariant(
         false,
         'Slider has been removed from react-native core. ' +
-          "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " +
-          'See https://github.com/callstack/react-native-slider',
+        "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " +
+        'See https://github.com/callstack/react-native-slider',
       );
     },
   });
